
package cup.example;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
	//need to somehow import the toylexer here
  TScanner scanner;
  Parser(TScanner scanner) { this.scanner = scanner; }
  	public void syntax_error(Symbol cur_token) {
		done_parsing();
	}
	public void unrecovered_syntax_error(Symbol cur_token) {
		System.out.println(" unrecoverable [reject]");
	}
:}


scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal	BOOLN, DBL, _INT, STRING, NUL;
terminal	_IF, ELS, FR, WHLE;
terminal	INTCONST, DBLCONST, STRINGCONST, BOOLCONST;
terminal	ADDOP, SUBOP, MULOP, DIV, MOD;
terminal	LFTPRN, RTPRN, LFTBRACKET, RTBRC, LFTBRACE, RTBRACE;
terminal	LESS, LESSEQ, GRT, GRTEQ, EQL, NEQ;
terminal	AND, OR, NOT;
terminal	ASSIGN, SEMICOL, COMMA, DOT;
terminal	BRK, CLS, EXTNDS, IMPL, INTRFC, NEWAR;
terminal	PRNTLN, READLN, RTRN, _VOID, NW;
terminal	ID;

/* Non terminals */
non terminal	Program, Decls, Decl;
non terminal	VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl;
non terminal	Variable, Type, Formals, Variables, Extends, Implements, Implement;
non terminal	Field, Fields, Prototype, StmtBlock, VariableDecls, Stmts, Stmt;
non terminal	OptionExpr, WhileStmt, ForStmt, BreakStmt;
non terminal	ReturnStmt, PrintStmt, Expr, Exprs, Lvalue, Call, Actuals, Constant;
non terminal	IfStmt;

/* Precedences */
precedence nonassoc RTPRN;	// Inserted by Eclipse plugin
precedence left LFTBRACKET, DOT;
precedence left NOT;
precedence left MULOP, DIV, MOD;
precedence left ADDOP, SUBOP;
precedence left EQL, NEQ;
precedence left LESS, LESSEQ, GRT, GRTEQ;
precedence left AND;
precedence left OR;
precedence right ASSIGN;

//precedence left ELS;

/* Toy grammar */

start with Program;

Program ::= 	
	Decls 
		{: 	System.out.print("[reduce 1]"); System.out.print("[accept]"); done_parsing(); :};

Decls ::= 
	Decl
		{: System.out.print("[reduce 2]"); :} 
	| Decl Decls
		{: System.out.print("[reduce 3]"); :} ;

Decl ::=
	VariableDecl 	
		{: System.out.print("[reduce 4]"); :} 
	| FunctionDecl 	
		{: System.out.print("[reduce 5]"); :} 
	| ClassDecl 		
		{: System.out.print("[reduce 6]"); :} 
	| InterfaceDecl	
		{: System.out.print("[reduce 7]"); :} ;

VariableDecl ::=
	Variable SEMICOL	
		{: System.out.print("[reduce 8]"); :} 
	;

Variable ::=
	Type ID
		{: System.out.print("[reduce 9]"); :} ;

Type ::=
	_INT 
		{: System.out.print("[reduce 10]"); :} 
	| DBL
		{: System.out.print("[reduce 11]"); :} 
	| BOOLN
		{: System.out.print("[reduce 12]"); :} 
	| STRING
		{: System.out.print("[reduce 13]"); :} 
	| Type LFTBRACKET RTBRC 	
		{: System.out.print("[reduce 14]"); :}
;



FunctionDecl ::= 
	Type ID LFTPRN Formals RTPRN StmtBlock 
		{: System.out.print("[reduce 16]"); :} 
	| _VOID ID LFTPRN Formals RTPRN StmtBlock
		{: System.out.print("[reduce 17]"); :} ;
						
Formals ::=
	// EMPTY
		{: System.out.print("[reduce 18]"); :} 
	| Variables
		{: System.out.print("[reduce 19]"); :} ;

Variables ::= 
	Variable
		{: System.out.print("[reduce 20]"); :}  
	| Variable COMMA Variables	
		{: System.out.print("[reduce 21]"); :} ;

ClassDecl ::= 
	CLS ID Extends Implements LFTBRACE Fields RTBRACE
		{: System.out.print("[reduce 22]"); :} ;

Extends ::=
	// EMPTY
		{: System.out.print("[reduce 23]"); :}
	| EXTNDS ID
		{: System.out.print("[reduce 24]"); :};

Implements ::= 
	// EMPTY
		{: System.out.print("[reduce 25]"); :}
	| Implement
		{: System.out.print("[reduce 26]"); :};

Implement ::= 
	IMPL ID 
		{: System.out.print("[reduce 27]"); :}
	| IMPL ID COMMA Implement
		{: System.out.print("[reduce 28]"); :};

Fields ::= 	
	// EMPTY
		{: System.out.print("[reduce 29]"); :}
	| Field Fields
		{: System.out.print("[reduce 30]"); :};

Field ::= 
	VariableDecl
		{: System.out.print("[reduce 31]"); :} 
	| FunctionDecl	
		{: System.out.print("[reduce 32]"); :};

InterfaceDecl ::= 
	INTRFC ID LFTBRACE Prototype RTBRACE	
		{: System.out.print("[reduce 33]"); :};

Prototype ::=
	// EMPTY
		{: System.out.print("[reduce 34]"); :}
	| Type ID LFTPRN Formals RTPRN SEMICOL Prototype 
		{: System.out.print("[reduce 35]"); :}
	| _VOID ID LFTPRN Formals RTPRN SEMICOL Prototype
		{: System.out.print("[reduce 36]"); :};
					
StmtBlock ::= 
	LFTBRACE VariableDecls Stmts RTBRACE	
		{: System.out.print("[reduce 37]"); :}
	;

VariableDecls ::=
		{:System.out.print("[reduce 38]"); :}
		|
		 VariableDecls VariableDecl
		{: System.out.print("[reduce 39]"); :}
		
	;
Stmts ::=
	// EMPTY
		{: System.out.print("[reduce 40]"); :}
	| Stmt Stmts
		{: System.out.print("[reduce 41]"); :};

Stmt ::= 
	OptionExpr SEMICOL 
		{: System.out.print("[reduce 42]"); :}
	| IfStmt 
		{: System.out.print("[reduce 43]"); :}
	| WhileStmt 
		{: System.out.print("[reduce 44]"); :}
	| ForStmt 	
		{: System.out.print("[reduce 45]"); :}
	| BreakStmt
		{: System.out.print("[reduce 46]"); :}
	| ReturnStmt 
		{: System.out.print("[reduce 47]"); :}
	| PrintStmt 
		{: System.out.print("[reduce 48]"); :}
	| StmtBlock
		{: System.out.print("[reduce 49]"); :};

IfStmt ::= 
	_IF LFTPRN Expr RTPRN Stmt	
		{: System.out.print("[reduce 50]"); :} 
	|  _IF LFTPRN Expr RTPRN Stmt ELS Stmt	
		{: System.out.print("[reduce 51]"); :}; 

WhileStmt ::=
	WHLE LFTPRN Expr RTPRN Stmt
		{: System.out.print("[reduce 52]"); :};

ForStmt ::=
	FR LFTPRN OptionExpr SEMICOL Expr SEMICOL OptionExpr RTPRN Stmt	
		{: System.out.print("[reduce 53]"); :};

BreakStmt ::= 
	BRK SEMICOL
		{: System.out.print("[reduce 54]"); :};

ReturnStmt ::= 
	RTRN OptionExpr SEMICOL		
		{: System.out.print("[reduce 55]"); :};

PrintStmt ::= 
	PRNTLN LFTPRN Exprs RTPRN SEMICOL	
		{: System.out.print("[reduce 56]"); :};
		
Expr ::= 
	Lvalue ASSIGN Expr 
		{: System.out.print("[reduce 57]"); :}
	| Constant 
		{: System.out.print("[reduce 58]"); :}
	| Lvalue
		{: System.out.print("[reduce 59]"); :}
	| Call
		{: System.out.print("[reduce 60]"); :}
	| LFTPRN Expr RTPRN 
		{: System.out.print("[reduce 61]"); :}
	| Expr ADDOP Expr 	
		{: System.out.print("[reduce 62]"); :}
	| Expr SUBOP Expr 
		{: System.out.print("[reduce 63]"); :}
	| Expr MULOP Expr 
		{: System.out.print("[reduce 64]"); :}
	| Expr DIV Expr 
		{: System.out.print("[reduce 65]"); :}
	| Expr MOD Expr 	
		{: System.out.print("[reduce 66]"); :}
	| Expr LESS Expr 	
		{: System.out.print("[reduce 68]"); :}
	| Expr LESSEQ Expr
		{: System.out.print("[reduce 69]"); :}
	| Expr GRT Expr 
		{: System.out.print("[reduce 70]"); :}
	| Expr GRTEQ Expr 
		{: System.out.print("[reduce 71]"); :}
	| Expr EQL Expr 
		{: System.out.print("[reduce 72]"); :}
	| Expr NEQ Expr 
		{: System.out.print("[reduce 73]"); :}
	| Expr AND Expr 
		{: System.out.print("[reduce 74]"); :}
	| Expr OR Expr 
		{: System.out.print("[reduce 75]"); :}
	| NOT Expr 
		{: System.out.print("[reduce 76]"); :}
	| READLN LFTPRN RTPRN 
		{: System.out.print("[reduce 77]"); :}
	| NEWAR LFTPRN INTCONST COMMA Type RTPRN
		{: System.out.print("[reduce 78]"); :};


			
Lvalue ::= Lvalue LFTBRACKET Expr RTBRC 
		{: System.out.print("[reduce 80]"); :}
	| Lvalue DOT ID
		{: System.out.print("[reduce 81]"); :};

Call ::= 
	ID LFTPRN Actuals RTPRN 
		{: System.out.print("[reduce 82]"); :}
	| ID DOT ID LFTPRN Actuals RTPRN
		{: System.out.print("[reduce 83]"); :};

Actuals ::=
	// EMPTY
		{: System.out.print("[reduce 84]"); :} 
	| Exprs	
		{: System.out.print("[reduce 85]"); :};

Exprs ::= 
	Expr
		{: System.out.print("[reduce 86]"); :}
	| Expr COMMA Exprs
		{: System.out.print("[reduce 87]"); :};

Constant ::= 
	INTCONST
		{: System.out.print("[reduce 88]"); :}
	| DBLCONST
		{: System.out.print("[reduce 89]"); :}
	| STRINGCONST 
		{: System.out.print("[reduce 90]"); :}
	| BOOLCONST
		{: System.out.print("[reduce 91]"); :};
					
OptionExpr ::= 
	//EMPTY
		{: System.out.print("[reduce 92]"); :}
	| Expr
		{: System.out.print("[reduce 93]"); :};

// ~~ CUP-ECLIPSE:CONFLICT-RES-RR ~~ 
 // After this the order of productions matters

//Moved by CUP Eclipse plugin
Type ::=  ID {: System.out.print("[reduce 15]"); :};

//Moved by CUP Eclipse plugin
Lvalue ::=  
	ID
		{: System.out.print("[reduce 79]"); :}
	;

